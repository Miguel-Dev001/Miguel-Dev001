{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNGKvUvnHkZYVReG5j/SAoM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Miguel-Dev001/Miguel-Dev001/blob/main/Bibliotecas%20e%20M%C3%B3dulos%20em%20Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "BbygvDxWyFrl",
        "outputId": "828fda8f-8cfb-4a86-db43-72b205e1ed7f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Título: O Pequeno Príncipe, Autor: Antoine de Saint-Exupéry, Gênero: Ficção\n",
            "Título: 1984, Autor: George Orwell, Gênero: Distopia\n",
            "Livro encontrado: 1984\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Bibliotecas e Módulos em Python -  Atividade\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Livro:\n",
        "    def __init__(self, titulo, autor, genero):\n",
        "        self.titulo = titulo\n",
        "        self.autor = autor\n",
        "        self.genero = genero\n",
        "\n",
        "class Biblioteca:\n",
        "    def __init__(self):\n",
        "        self.livros = []\n",
        "\n",
        "    def cadastrar_livro(self, livro):\n",
        "        self.livros.append(livro)\n",
        "\n",
        "    def listar_livros(self):\n",
        "        for livro in self.livros:\n",
        "            print(f\"Título: {livro.titulo}, Autor: {livro.autor}, Gênero: {livro.genero}\")\n",
        "\n",
        "    def buscar_livro(self, titulo):\n",
        "        for livro in self.livros:\n",
        "            if livro.titulo == titulo:\n",
        "                return livro\n",
        "        return None\n",
        "\n",
        "    def gerar_grafico(self):\n",
        "        generos = {}\n",
        "        for livro in self.livros:\n",
        "            generos[livro.genero] = generos.get(livro.genero, 0) + 1\n",
        "\n",
        "        plt.bar(generos.keys(), generos.values())\n",
        "        plt.xlabel(\"Gênero\")\n",
        "        plt.ylabel(\"Quantidade\")\n",
        "        plt.title(\"Livros por Gênero\")\n",
        "        plt.show()\n",
        "\n",
        "# Exemplo de uso\n",
        "biblioteca = Biblioteca()\n",
        "\n",
        "biblioteca.cadastrar_livro(Livro(\"O Pequeno Príncipe\", \"Antoine de Saint-Exupéry\", \"Ficção\"))\n",
        "biblioteca.cadastrar_livro(Livro(\"1984\", \"George Orwell\", \"Distopia\"))\n",
        "# ... cadastrar mais livros\n",
        "\n",
        "biblioteca.listar_livros()\n",
        "\n",
        "livro_buscado = biblioteca.buscar_livro(\"1984\")\n",
        "if livro_buscado:\n",
        "    print(f\"Livro encontrado: {livro_buscado.titulo}\")\n",
        "else:\n",
        "    print(\"Livro não encontrado.\")\n",
        "\n",
        "biblioteca.gerar_grafico()"
      ]
    }
  ]
}